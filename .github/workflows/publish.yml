---
# This is a basic workflow to help you get started with Actions

name: CI publish

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for
  # the "main" branch
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially
# or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part
    # of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job
      # can access it
      - uses: actions/checkout@v3
      # your stuff
      - uses: actions/setup-node@v3
        with:
          node-version: 20
      - run: npm install moment
      - run: dd if=/dev/urandom of=$(date '+%Y%m%d-%H%M').bin bs=2M count=1
      - run: zip target/packed.zip *.bin
      - run: find . | tee file.lst
      - uses: actions/github-script@v6
        with:
          debug: false
          script: | 
            const moment = require('moment')
            const fs = require('fs');
            tag_name = moment().format('YYYYMMDD-HHmmss');
            releaseInfo = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name});
            console.log(releaseInfo);
            releaseId = releaseInfo.data.id;
            releaseUrl = releaseInfo.data.upload_url;
            fileData = fs.readFileSync("file.lst", "utf-8");
            result = await github.request({
              method: "POST",
              url: releaseUrl,
              headers: {
                "content-type": "text/plain",
                },
              data: fileData,
              name: "file.lst",
              label: "File list",
              });
            console.log(result);
            fileData = fs.readFileSync("target/packed.zip", "utf-8");
            result = await github.request({
              method: "POST",
              url: releaseUrl,
              headers: {
                "content-type": "text/plain",
                },
              data: Buffer(fileData).toString('base64'),
              name: "packed.zip",
              label: "Target",
              });
            console.log(result);
